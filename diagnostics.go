// Package diagnostics provides facilities for running tests and checks of a network or system.
package diagnostics

import (
	"reflect"
	"runtime"
	"sync"

	ping "github.com/sparrc/go-ping"
)

const (
	// The version encoded in reports. This only needs to change if breaking changes are made to the
	// report structure. This version applies to the top-level report and all sub-reports.
	reportVersion = 1

	// Number of packets to send per address in ping tests.
	pingCount = 5
)

var (
	pingAddresses = []string{
		"8.8.8.8", // TODO: replace me (this is just a placeholder)
	}

	// Forces the ping report to run on non-Windows systems. Useful for testing, but requires root
	// permissions. See generatePingReport().
	forcePingReport = false
)

// The report sturctures below define how diagnostic reports are encoded. All structs represented as
// fields and sub-fields of Report should be JSON-friendly. Care should be taken to avoid making
// breaking changes to the structure of any of these reports. If necessary, bump the reportVersion
// constant.

// Report generated by Run. This structure is designed to be JSON-friendly.
type Report struct {
	// Version is used when decoding the report. This only needs to change if breaking changes are
	// made to the report structure. Version applies to the top-level report and all sub-reports.
	Version int

	Network NetworkReport
}

// Run a full diagnostics report.
func Run() Report {
	return Report{
		Version: reportVersion,
		Network: generateNetworkReport(),
	}
}

// HasErrors returns true if this report contains any errors.
func (rp Report) HasErrors() bool {
	return hasErrors(rp)
}

// NetworkReport contains information about the quality of the network connection.
type NetworkReport struct {
	Ping PingReport
}

func generateNetworkReport() NetworkReport {
	return NetworkReport{generatePingReport()}
}

// PingReport is part of the NetworkReport.
type PingReport struct {
	// Statistics is a map of addresses to PingStatistics.
	Statistics map[string]PingStatistics `json:",omitempty"`

	// If there is an error, the statistics map may be nil.
	Error *string `json:",omitempty"`
}

// PingStatistics represents statistics about a ping test.
type PingStatistics struct {
	ping.Statistics `json:",omitempty"`

	// If there is an error, the statistics may not be reliable or meaningful.
	Error *string `json:",omitempty"`
}

func generatePingReport() PingReport {
	if runtime.GOOS != "windows" && !forcePingReport {
		// We need root permissions to ping on Linux and Mac OS:
		// https://github.com/sparrc/go-ping#note-on-windows-support
		//
		// We could just run the ping command on those systems and parse the output, but that
		// doesn't seem worth the effort at the moment.
		return PingReport{Error: sPtr("ping report is currently only supported on windows")}
	}

	var (
		stats = make(chan PingStatistics, len(pingAddresses))
		wg    = new(sync.WaitGroup)
	)
	for _, a := range pingAddresses {
		wg.Add(1)
		go func(addr string) {
			defer wg.Done()
			p, err := ping.NewPinger(addr)
			if err != nil {
				stats <- PingStatistics{Error: sPtr(err.Error()), Statistics: ping.Statistics{Addr: addr}}
				return
			}
			p.Count = pingCount
			p.SetPrivileged(true)
			p.Run()
			stats <- PingStatistics{Statistics: *p.Statistics()}
		}(a)
	}
	wg.Wait()
	close(stats)

	statsMap := map[string]PingStatistics{}
	for s := range stats {
		statsMap[s.Addr] = s
	}
	return PingReport{statsMap, nil}
}

// Returns true iff v has any non-nil fields or subfields named "Error".
func hasErrors(v interface{}) bool {
	reflected := reflect.Indirect(reflect.ValueOf(v))
	switch reflected.Kind() {
	case reflect.Struct:
		for i := 0; i < reflected.NumField(); i++ {
			if reflected.Type().Field(i).Name == "Error" && !reflected.Field(i).IsNil() {
				return true
			}
			if hasErrors(reflected.Field(i).Interface()) {
				return true
			}
		}
		return false

	case reflect.Map:
		iter := reflected.MapRange()
		for iter.Next() {
			if hasErrors(iter.Value().Interface()) {
				return true
			}
		}
		return false

	default:
		return false
	}
}

func sPtr(s string) *string {
	return &s
}
